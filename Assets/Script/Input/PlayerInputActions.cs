//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Script/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e25320ba-4449-4a75-9d76-13ecf20694e7"",
            ""actions"": [
                {
                    ""name"": ""SkillUseH"",
                    ""type"": ""Button"",
                    ""id"": ""11ab4f9f-c6e6-4405-b30c-0089f73edc63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillUseD"",
                    ""type"": ""Button"",
                    ""id"": ""6c847355-3768-4f7a-8ef7-fb825d27f508"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillUseS"",
                    ""type"": ""Button"",
                    ""id"": ""55923ad4-53f7-4314-8c13-48f64803a82c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillUseA"",
                    ""type"": ""Button"",
                    ""id"": ""d9f4f999-56ac-4f51-a531-9a3af1eb9533"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillUseShift"",
                    ""type"": ""Button"",
                    ""id"": ""5b389b28-4cfd-4004-8818-15c9ce7ddacb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fd3c4991-8028-47fb-8832-b701d7a24048"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenC"",
                    ""type"": ""Button"",
                    ""id"": ""a0572c0e-5872-4ff5-8ed7-a4a346c6400e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseV"",
                    ""type"": ""Button"",
                    ""id"": ""f55a8141-0a1d-4702-916a-c0839f376af8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseB"",
                    ""type"": ""Button"",
                    ""id"": ""6e94ed1b-a432-491e-9291-109363ac6df6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseN"",
                    ""type"": ""Button"",
                    ""id"": ""05ef2c63-e880-44a7-a6ff-481b7d65a533"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""28be18f9-4af3-44af-a16a-bd4f97469a74"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillUseH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de9799de-0f2e-49f9-a214-90a5f2b335cd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillUseD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39ee0928-fb8a-4700-a667-9d363ef020bf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillUseS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab9ab616-81ae-4d49-a6df-1f60de666d91"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillUseA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ba2b281-519a-40cd-b3c8-2a9ce8e1dd07"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillUseShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf5b25a2-e387-4c1d-9310-175b88a16147"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""eca68870-2df3-4c7a-bbb3-f808d0a0f67c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""eefd972f-47d1-412f-94fa-9bc3f7dd8954"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""e84a16ce-b126-4187-96c5-ba7c8c33154c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""11fc798a-50be-4920-9acd-cea2b0cbcdbb"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4cbbad41-3870-42a2-903c-3e4c54fd677a"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cebfb368-7902-4bcb-8ee9-44f26215e465"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""583f6495-8b13-4423-812c-cebf2b0d727f"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""58cdce2e-76a9-474f-a566-ef37be43e082"",
            ""actions"": [
                {
                    ""name"": ""CloseC"",
                    ""type"": ""Button"",
                    ""id"": ""386a4723-9d83-4b51-89c2-677ec03cdc40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseV"",
                    ""type"": ""Button"",
                    ""id"": ""1e3afb83-fb3b-4090-b287-94866001fce4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseB"",
                    ""type"": ""Button"",
                    ""id"": ""5ae8bfb1-ab79-44b6-a8ba-6001db9291d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseN"",
                    ""type"": ""Button"",
                    ""id"": ""ea9061b1-a7c5-42e2-9e05-84f5400bb9f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""63afc5d9-78a2-467b-8e2c-e73261cb6c08"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""95726407-eadf-48f5-9ec7-5002297b404e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c89c3b4-41c2-449b-a1b0-0cbd290e9a0d"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d44cece9-017a-460e-8e3a-9a3fb03b478f"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e96b93a7-63ae-4164-b49b-12391ebce04b"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""119d89ef-ff33-48bf-b2be-bb2a114f829f"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fe196ca-ef80-4459-9aee-21d062507c4c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""001cb5f8-a350-4a66-ab91-999b3f387cb0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_SkillUseH = m_Player.FindAction("SkillUseH", throwIfNotFound: true);
        m_Player_SkillUseD = m_Player.FindAction("SkillUseD", throwIfNotFound: true);
        m_Player_SkillUseS = m_Player.FindAction("SkillUseS", throwIfNotFound: true);
        m_Player_SkillUseA = m_Player.FindAction("SkillUseA", throwIfNotFound: true);
        m_Player_SkillUseShift = m_Player.FindAction("SkillUseShift", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_OpenC = m_Player.FindAction("OpenC", throwIfNotFound: true);
        m_Player_CloseV = m_Player.FindAction("CloseV", throwIfNotFound: true);
        m_Player_CloseB = m_Player.FindAction("CloseB", throwIfNotFound: true);
        m_Player_CloseN = m_Player.FindAction("CloseN", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_CloseC = m_UI.FindAction("CloseC", throwIfNotFound: true);
        m_UI_CloseV = m_UI.FindAction("CloseV", throwIfNotFound: true);
        m_UI_CloseB = m_UI.FindAction("CloseB", throwIfNotFound: true);
        m_UI_CloseN = m_UI.FindAction("CloseN", throwIfNotFound: true);
        m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
        m_UI_LeftClick = m_UI.FindAction("Left Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_SkillUseH;
    private readonly InputAction m_Player_SkillUseD;
    private readonly InputAction m_Player_SkillUseS;
    private readonly InputAction m_Player_SkillUseA;
    private readonly InputAction m_Player_SkillUseShift;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_OpenC;
    private readonly InputAction m_Player_CloseV;
    private readonly InputAction m_Player_CloseB;
    private readonly InputAction m_Player_CloseN;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkillUseH => m_Wrapper.m_Player_SkillUseH;
        public InputAction @SkillUseD => m_Wrapper.m_Player_SkillUseD;
        public InputAction @SkillUseS => m_Wrapper.m_Player_SkillUseS;
        public InputAction @SkillUseA => m_Wrapper.m_Player_SkillUseA;
        public InputAction @SkillUseShift => m_Wrapper.m_Player_SkillUseShift;
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @OpenC => m_Wrapper.m_Player_OpenC;
        public InputAction @CloseV => m_Wrapper.m_Player_CloseV;
        public InputAction @CloseB => m_Wrapper.m_Player_CloseB;
        public InputAction @CloseN => m_Wrapper.m_Player_CloseN;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @SkillUseH.started += instance.OnSkillUseH;
            @SkillUseH.performed += instance.OnSkillUseH;
            @SkillUseH.canceled += instance.OnSkillUseH;
            @SkillUseD.started += instance.OnSkillUseD;
            @SkillUseD.performed += instance.OnSkillUseD;
            @SkillUseD.canceled += instance.OnSkillUseD;
            @SkillUseS.started += instance.OnSkillUseS;
            @SkillUseS.performed += instance.OnSkillUseS;
            @SkillUseS.canceled += instance.OnSkillUseS;
            @SkillUseA.started += instance.OnSkillUseA;
            @SkillUseA.performed += instance.OnSkillUseA;
            @SkillUseA.canceled += instance.OnSkillUseA;
            @SkillUseShift.started += instance.OnSkillUseShift;
            @SkillUseShift.performed += instance.OnSkillUseShift;
            @SkillUseShift.canceled += instance.OnSkillUseShift;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @OpenC.started += instance.OnOpenC;
            @OpenC.performed += instance.OnOpenC;
            @OpenC.canceled += instance.OnOpenC;
            @CloseV.started += instance.OnCloseV;
            @CloseV.performed += instance.OnCloseV;
            @CloseV.canceled += instance.OnCloseV;
            @CloseB.started += instance.OnCloseB;
            @CloseB.performed += instance.OnCloseB;
            @CloseB.canceled += instance.OnCloseB;
            @CloseN.started += instance.OnCloseN;
            @CloseN.performed += instance.OnCloseN;
            @CloseN.canceled += instance.OnCloseN;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @SkillUseH.started -= instance.OnSkillUseH;
            @SkillUseH.performed -= instance.OnSkillUseH;
            @SkillUseH.canceled -= instance.OnSkillUseH;
            @SkillUseD.started -= instance.OnSkillUseD;
            @SkillUseD.performed -= instance.OnSkillUseD;
            @SkillUseD.canceled -= instance.OnSkillUseD;
            @SkillUseS.started -= instance.OnSkillUseS;
            @SkillUseS.performed -= instance.OnSkillUseS;
            @SkillUseS.canceled -= instance.OnSkillUseS;
            @SkillUseA.started -= instance.OnSkillUseA;
            @SkillUseA.performed -= instance.OnSkillUseA;
            @SkillUseA.canceled -= instance.OnSkillUseA;
            @SkillUseShift.started -= instance.OnSkillUseShift;
            @SkillUseShift.performed -= instance.OnSkillUseShift;
            @SkillUseShift.canceled -= instance.OnSkillUseShift;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @OpenC.started -= instance.OnOpenC;
            @OpenC.performed -= instance.OnOpenC;
            @OpenC.canceled -= instance.OnOpenC;
            @CloseV.started -= instance.OnCloseV;
            @CloseV.performed -= instance.OnCloseV;
            @CloseV.canceled -= instance.OnCloseV;
            @CloseB.started -= instance.OnCloseB;
            @CloseB.performed -= instance.OnCloseB;
            @CloseB.canceled -= instance.OnCloseB;
            @CloseN.started -= instance.OnCloseN;
            @CloseN.performed -= instance.OnCloseN;
            @CloseN.canceled -= instance.OnCloseN;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_CloseC;
    private readonly InputAction m_UI_CloseV;
    private readonly InputAction m_UI_CloseB;
    private readonly InputAction m_UI_CloseN;
    private readonly InputAction m_UI_Point;
    private readonly InputAction m_UI_LeftClick;
    public struct UIActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseC => m_Wrapper.m_UI_CloseC;
        public InputAction @CloseV => m_Wrapper.m_UI_CloseV;
        public InputAction @CloseB => m_Wrapper.m_UI_CloseB;
        public InputAction @CloseN => m_Wrapper.m_UI_CloseN;
        public InputAction @Point => m_Wrapper.m_UI_Point;
        public InputAction @LeftClick => m_Wrapper.m_UI_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @CloseC.started += instance.OnCloseC;
            @CloseC.performed += instance.OnCloseC;
            @CloseC.canceled += instance.OnCloseC;
            @CloseV.started += instance.OnCloseV;
            @CloseV.performed += instance.OnCloseV;
            @CloseV.canceled += instance.OnCloseV;
            @CloseB.started += instance.OnCloseB;
            @CloseB.performed += instance.OnCloseB;
            @CloseB.canceled += instance.OnCloseB;
            @CloseN.started += instance.OnCloseN;
            @CloseN.performed += instance.OnCloseN;
            @CloseN.canceled += instance.OnCloseN;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @CloseC.started -= instance.OnCloseC;
            @CloseC.performed -= instance.OnCloseC;
            @CloseC.canceled -= instance.OnCloseC;
            @CloseV.started -= instance.OnCloseV;
            @CloseV.performed -= instance.OnCloseV;
            @CloseV.canceled -= instance.OnCloseV;
            @CloseB.started -= instance.OnCloseB;
            @CloseB.performed -= instance.OnCloseB;
            @CloseB.canceled -= instance.OnCloseB;
            @CloseN.started -= instance.OnCloseN;
            @CloseN.performed -= instance.OnCloseN;
            @CloseN.canceled -= instance.OnCloseN;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayerActions
    {
        void OnSkillUseH(InputAction.CallbackContext context);
        void OnSkillUseD(InputAction.CallbackContext context);
        void OnSkillUseS(InputAction.CallbackContext context);
        void OnSkillUseA(InputAction.CallbackContext context);
        void OnSkillUseShift(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnOpenC(InputAction.CallbackContext context);
        void OnCloseV(InputAction.CallbackContext context);
        void OnCloseB(InputAction.CallbackContext context);
        void OnCloseN(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnCloseC(InputAction.CallbackContext context);
        void OnCloseV(InputAction.CallbackContext context);
        void OnCloseB(InputAction.CallbackContext context);
        void OnCloseN(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
    }
}
